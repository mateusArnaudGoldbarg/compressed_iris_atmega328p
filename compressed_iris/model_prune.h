#include "math.h"

const float dense1_prune[4][10] = {{0.,-0.6011158,0.,-0.36991742,-0.,0.,1.1559919,-0.5240497,-0.5394629,-0.},
{0.5857026,0.,0.,0.,-0.5394629,0.47781,1.2484713,-0.5394629,0.,0.81690097},
{0.,0.,0.5240497,0.,-0.40074387,1.1559919,-2.2657442,0.,-0.36991742,0.},
{-0.87855387,-0.38533065,0.,-0.49322322,-0.,0.73983485,-0.,0.38533065,0.,0.}};
      
const float bias1_prune[10] = {0.22973652,  0.11486826,  0.,0.11486826, -0.,0.15315768,  0.7083543 ,  0.11486826,  0.11486826, -0.};

const float dense2_prune[10][10] = {{0,0,0,0.57072824,0,0,0,-0.90048236,0.6341425,0},
{0.26633987,0,-0.39316836,0.507314,-0.27902272,0,0,0.40585122,0.44389978,-0.57072824},
{0,-0.253657,-0.59609395,-0.35511982,-0.,0.,0.,0.,-0.6468254,0.},
{0.55804545,0.,-0.41853407,0.,-0.44389978,0.,0.,0.35511982,0.34243697,0.507314},
{-0.,-0.5453626,-0.40585122,-0.3043884,-0.35511982,0.55804545,-0.27902272,-0.55804545,0.,-0.},
{-0.,-0.,0.40585122,0.,-0.5834111,1.4204793,-0.43121693,0.,-0.,0.},
{-0.6087768,0.41853407,-0.55804545,0.,0.4565826,0.,0.40585122,-0.760971,0.81170243,1.8263304},
{0.,-0.41853407,0.35511982,0.,-0.507314,0.,0.57072824,-0.27902272,-0.34243697,-0.55804545},
{-0.26633987,0.,0.,0.,-0.31707126,-0.57072824,0.,0.5453626,0.,-0.39316836},
{-0.,-0.27902272,-0.41853407,-0.41853407,-0.3043884,0.,-0.44389978,0.83706814,0.6975568,0.}};
        
const float bias2_prune[10] = {0, 0, 0.08483632, 0.08483632, 0, 0, 0.08247975, 0.29457054, 0.36055434, 0};

const float dense3_prune[10][3] = {{0.79002285,0,0},
{0,0,0},
{0,0,0},
{0.5865321,0.70623255,0},
{-0.70623255,0,0.3591013},
{-1.4603453,0,0},
{0,0.34713125,0.7182026},
{0,0,1.4723153},
{1.125184,0.,0},
{0.6703224,0,-1.8314166}};

const float bias3_prune[3] = {0.,  0.8386401, 0.};


int predict_prune(float m1, float m2, float m3, float m4){
  float input[4] = {m1,m2,m3,m4};
  
  float n1[10] = {0,0,0,0,0,0,0,0,0,0};
  float n2[10] = {0,0,0,0,0,0,0,0,0,0};
  float n3[3] = {0,0,0};
  int zeros = 0;
  int uns = 0;
  //dense1
  for(int i=0;i<4;i++){
    for(int j=0;j<10;j++){
      if(dense1_prune[i][j] != 0. )
        n1[j] += input[i]*dense1_prune[i][j];
      
    }
  }
  //bias1
  for(int i=0;i<10;i++){
    if(bias1_prune[i]!=0.)
      n1[i]+=bias1_prune[i];
  }
  
  //relu
  for(int i=0;i<10;i++){
          if(n1[i]<0.){
                n1[i] = 0;
          }
      }
      
      //dense2
  for(int i=0;i<10;i++){
    for(int j=0;j<10;j++){
      if(dense2_prune[i][j] !=0.)
        n2[j] += n1[i]*dense2_prune[i][j];
    }
  }
  
  //bias2
  for(int i=0;i<10;i++){
    if(bias2_prune[i] !=0.)
      n2[i]+=bias2_prune[i];
  }
  
  //relu
  for(int i=0;i<10;i++){
    if(n2[i]<0.){
      n2[i] = 0;
    }
  }
      
  //dense3
  for(int i=0;i<10;i++){
    for(int j=0;j<3;j++){
      if(dense3_prune[i][j] !=0.)
        n3[j] += n2[i]*dense3_prune[i][j];
    }
  }
  
  //bias3
  for(int i=0;i<3;i++){
    if(bias3_prune[i] !=0.)
      n3[i]+=bias3_prune[i];
  }
  
  //softmax
  double p1 = exp(n3[0])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
  double p2 = exp(n3[1])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
  double p3 = exp(n3[2])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
      
  if(p1>p2 && p1>p3)
    return 1;
  if(p2>p1 && p2>p3)
    return 2;
  else
    return 3;
      
  

}

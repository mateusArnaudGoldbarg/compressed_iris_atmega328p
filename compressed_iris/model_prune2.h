#include "math.h"

const float dense1_prune[4][10] = {{0.,-0.6011158,0.,-0.36991742,-0.,0.,1.1559919,-0.5240497,-0.5394629,-0.},
{0.5857026,0.,0.,0.,-0.5394629,0.47781,1.2484713,-0.5394629,0.,0.81690097},
{0.,0.,0.5240497,0.,-0.40074387,1.1559919,-2.2657442,0.,-0.36991742,0.},
{-0.87855387,-0.38533065,0.,-0.49322322,-0.,0.73983485,-0.,0.38533065,0.,0.}};
      
const float bias1_prune[10] = {0.22973652,  0.11486826,  0.,0.11486826, -0.,0.15315768,  0.7083543 ,  0.11486826,  0.11486826, -0.};

const float dense2_prune[10][10] = {{0,0,0,0.57072824,0,0,0,-0.90048236,0.6341425,0},
{0.26633987,0,-0.39316836,0.507314,-0.27902272,0,0,0.40585122,0.44389978,-0.57072824},
{0,-0.253657,-0.59609395,-0.35511982,-0.,0.,0.,0.,-0.6468254,0.},
{0.55804545,0.,-0.41853407,0.,-0.44389978,0.,0.,0.35511982,0.34243697,0.507314},
{-0.,-0.5453626,-0.40585122,-0.3043884,-0.35511982,0.55804545,-0.27902272,-0.55804545,0.,-0.},
{-0.,-0.,0.40585122,0.,-0.5834111,1.4204793,-0.43121693,0.,-0.,0.},
{-0.6087768,0.41853407,-0.55804545,0.,0.4565826,0.,0.40585122,-0.760971,0.81170243,1.8263304},
{0.,-0.41853407,0.35511982,0.,-0.507314,0.,0.57072824,-0.27902272,-0.34243697,-0.55804545},
{-0.26633987,0.,0.,0.,-0.31707126,-0.57072824,0.,0.5453626,0.,-0.39316836},
{-0.,-0.27902272,-0.41853407,-0.41853407,-0.3043884,0.,-0.44389978,0.83706814,0.6975568,0.}};
        
const float bias2_prune[10] = {0, 0, 0.08483632, 0.08483632, 0, 0, 0.08247975, 0.29457054, 0.36055434, 0};

const float dense3_prune[10][3] = {{0.79002285,0,0},
{0,0,0},
{0,0,0},
{0.5865321,0.70623255,0},
{-0.70623255,0,0.3591013},
{-1.4603453,0,0},
{0,0.34713125,0.7182026},
{0,0,1.4723153},
{1.125184,0.,0},
{0.6703224,0,-1.8314166}};

const float bias3_prune[3] = {0.,  0.8386401, 0.};

const uint8_t dd1[21][2] = {{0, 1},
                        {0, 3},
                        {0, 6},
                        {0, 7},
                        {0, 8},
                        {1, 0},
                        {1, 4},
                        {1, 5},
                        {1, 6},
                        {1, 7},
                        {1, 9},
                        {2, 2},
                        {2, 4},
                        {2, 5},
                        {2, 6},
                        {2, 8},
                        {3, 0},
                        {3, 1},
                        {3, 3},
                        {3, 5},
                        {3, 7}};

const uint8_t dd2[58][2] = {{0, 3},
                        {0, 7},
                        {0, 8},
                        {1, 0},
                        {1, 2},
                        {1, 3},
                        {1, 4},
                        {1, 7},
                        {1, 8},
                        {1, 9},
                        {2, 1},
                        {2, 2},
                        {2, 3},
                        {2, 8},
                        {3, 0},
                        {3, 2},
                        {3, 4},
                        {3, 7},
                        {3, 8},
                        {3, 9},
                        {4, 1},
                        {4, 2},
                        {4, 3},
                        {4, 4},
                        {4, 5},
                        {4, 6},
                        {4, 7},
                        {5, 2},
                        {5, 4},
                        {5, 5},
                        {5, 6},
                        {6, 0},
                        {6, 1},
                        {6, 2},
                        {6, 4},
                        {6, 6},
                        {6, 7},
                        {6, 8},
                        {6, 9},
                        {7, 1},
                        {7, 2},
                        {7, 4},
                        {7, 6},
                        {7, 7},
                        {7, 8},
                        {7, 9},
                        {8, 0},
                        {8, 4},
                        {8, 5},
                        {8, 7},
                        {8, 9},
                        {9, 1},
                        {9, 2},
                        {9, 3},
                        {9, 4},
                        {9, 6},
                        {9, 7},
                        {9, 8}};

const uint8_t dd3[12][2] = {{0, 0},
                        {3, 0},
                        {3, 1},
                        {4, 0},
                        {4, 2},
                        {5, 0},
                        {6, 1},
                        {6, 2},
                        {7, 2},
                        {8, 0},
                        {9, 0},
                        {9, 2}};

const uint8_t bb1[7] = {0, 1, 3, 5, 6, 7, 8};
const uint8_t bb2[5] = {2, 3, 6, 7, 8};
const uint8_t bb3[1] = {1};

const uint8_t d1 = 21;
const uint8_t d2 = 58; 
const uint8_t d3 = 12;
const uint8_t b1 = 7;
const uint8_t b2 = 5;
const uint8_t b3 = 1;

int predict_prune(float m1, float m2, float m3, float m4){
  float input[4] = {m1,m2,m3,m4};
  
  float n1[10] = {0,0,0,0,0,0,0,0,0,0};
  float n2[10] = {0,0,0,0,0,0,0,0,0,0};
  float n3[3] = {0,0,0};

  //layer1
  for(int i=0;i<d1;i++){
    n1[dd1[i][1]] += input[dd1[i][0]]*dense1_prune[dd1[i][0]][dd1[i][1]];
  }
  
  //bias1
  for(int i=0;i<b1;i++){
    n1[bb1[i]] += bias1_prune[bb1[i]];
  }

  //relu
    for(int i=0;i<10;i++){
            if(n1[i]<0){
                  n1[i] = 0;
            }
        }
          
        
        //layer2
        for(int i=0;i<d2;i++){
    n2[dd2[i][1]] += n1[dd2[i][0]]*dense2_prune[dd2[i][0]][dd2[i][1]];
  }
  
  
      
  
  //bias2
  for(int i=0;i<b2;i++){
    n2[bb2[i]] += bias2_prune[bb2[i]];
  }

  
  //relu
    for(int i=0;i<10;i++){
            if(n2[i]<0){
                  n2[i] = 0;
            }
        }
        
        
  
        
        //layer3
        for(int i=0;i<d3;i++){
    n3[dd3[i][1]] += n2[dd3[i][0]]*dense3_prune[dd3[i][0]][dd3[i][1]];
  }
  
  //bias3
  for(int i=0;i<b3;i++){
    n3[bb3[i]] += bias3_prune[bb3[i]];
  }

  //softmax
  double p1 = exp(n3[0])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
    double p2 = exp(n3[1])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
    double p3 = exp(n3[2])/(exp(n3[0])+exp(n3[1])+exp(n3[2]));
      
  if(p1>p2 && p1>p3)
    return 1;
  if(p2>p1 && p2>p3)
    return 2;
  else
    return 3;
      
  

}
